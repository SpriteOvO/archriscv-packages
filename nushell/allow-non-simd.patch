diff --git a/src/generator.rs b/src/generator.rs
index 8e05f51..49e4fdd 100644
--- a/src/generator.rs
+++ b/src/generator.rs
@@ -1,5 +1,5 @@
 // This is mostly taken from json-rust's codegen
-// as it seems to perform well and it makes snense to see
+// as it seems to perform well and it makes sense to see
 // if we can adopt the approach
 //
 // https://github.com/maciejhirsz/json-rust/blob/master/src/codegen.rs
@@ -220,39 +220,6 @@ pub trait BaseGenerator {
         self.get_writer().write_all(s.as_bytes())
     }
 
-    /// writes an integer 128 bit
-    /// # Errors
-    /// if the write fails
-    #[inline(always)]
-    #[deprecated(since = "0.1.5", note = "Please use the write_int function instead")]
-    fn write_int128(&mut self, num: i128) -> io::Result<()> {
-        let mut buffer = itoa::Buffer::new();
-        let s = buffer.format(num);
-        self.get_writer().write_all(s.as_bytes())
-    }
-
-    /// writes an unsigned integer
-    /// # Errors
-    /// if the write fails
-    #[inline(always)]
-    #[deprecated(since = "0.1.5", note = "Please use the write_int function instead")]
-    fn write_uint(&mut self, num: u64) -> io::Result<()> {
-        let mut buffer = itoa::Buffer::new();
-        let s = buffer.format(num);
-        self.get_writer().write_all(s.as_bytes())
-    }
-
-    /// writes an unsigned 128bit integer
-    /// # Errors
-    /// if the write fails
-    #[inline(always)]
-    #[deprecated(since = "0.1.5", note = "Please use the write_int function instead")]
-    fn write_uint128(&mut self, num: u128) -> io::Result<()> {
-        let mut buffer = itoa::Buffer::new();
-        let s = buffer.format(num);
-        self.get_writer().write_all(s.as_bytes())
-    }
-
     #[cfg(target_feature = "avx2")]
     #[inline(always)]
     #[allow(clippy::cast_possible_wrap, clippy::cast_ptr_alignment)]
@@ -316,10 +283,7 @@ pub trait BaseGenerator {
         Ok(())
     }
 
-    #[cfg(all(
-        any(target_arch = "x86", target_arch = "x86_64"),
-        not(target_feature = "avx2")
-    ))]
+    #[cfg(all(not(target_feature = "avx2"), target_feature = "sse2"))]
     #[inline(always)]
     #[allow(clippy::cast_possible_wrap, clippy::cast_ptr_alignment)]
     /// Writes a string with simd-acceleration
@@ -380,9 +344,13 @@ pub trait BaseGenerator {
         Ok(())
     }
 
-    #[cfg(target_arch = "arm")]
+    #[cfg(all(
+        not(target_arch = "aarch64"),
+        not(all(target_arch = "wasm32", target_feature = "simd128")),
+        not(any(target_feature = "avx2", target_feature = "sse2")),
+    ))]
     #[inline(always)]
-    /// Writes a string with simd-acceleration
+    /// Writes a string with simd-acceleration (not really, as the architecture doesn't support it)
     /// # Safety
     /// This function is unsafe because it uses simd instructions
     /// # Errors
